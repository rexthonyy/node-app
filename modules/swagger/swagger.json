{
    "swagger": "2.0",
    "host": "88.208.212.245",
    "basePath": "/api/index.php",
    "produces": [
        "application/json",
        "application/xml"
    ],
    "consumes": [
        "application/json",
        "application/xml",
        "multipart/form-data"
    ],
    "paths": {
        "/boms/{id}": {
            "get": {
                "operationId": "retrieveBoms",
                "tags": [
                    "boms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of bom",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a bom object üîê",
                "description": "Return an array with bom informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateBoms",
                "tags": [
                    "boms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of bom to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateBomsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateBomsModel"
                        }
                    }
                ],
                "summary": "Update bom üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeBoms",
                "tags": [
                    "boms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "BOM ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete bom üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/boms": {
            "get": {
                "operationId": "listBoms",
                "tags": [
                    "boms"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.date_creation:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List boms üîê",
                "description": "Get a list of boms",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createBoms",
                "tags": [
                    "boms"
                ],
                "parameters": [
                    {
                        "name": "createBomsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createBomsModel"
                        }
                    }
                ],
                "summary": "Create bom object üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents/download": {
            "get": {
                "operationId": "listDocuments",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "modulepart",
                        "type": "string",
                        "description": "Name of module or area concerned by file download ('facture', ...)",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "original_file",
                        "type": "string",
                        "description": "Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf)",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Download a document. üîê",
                "description": " Note that, this API is similar to using the wrapper link \"documents.php\" to download a file (used for internal HTML links of documents into application), but with no need to have a session cookie (the token is used instead).",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents/builddoc": {
            "put": {
                "operationId": "documentsBuilddoc",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "documentsBuilddocModel",
                        "description": "**modulepart** (required)  \noriginal_file  \ndoctemplate  \nlangcode  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/documentsBuilddocModel"
                        }
                    }
                ],
                "summary": "Build a document. üîê",
                "description": " Test sample 1: { \"modulepart\": \"invoice\", \"original_file\": \"FA1701-001/FA1701-001.pdf\", \"doctemplate\": \"crabe\", \"langcode\": \"fr_FR\" }.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "501": {
                        "description": "Not Implemented"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents": {
            "get": {
                "operationId": "documentsRetrieveDocumentsListByElement",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "modulepart",
                        "type": "string",
                        "description": "Name of module or area concerned ('thirdparty', 'member', 'proposal', 'order', 'invoice', 'supplier_invoice', 'shipment', 'project', ...)",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of element",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of element",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "description": "Sort criteria ('','fullname','relativename','name','date','size')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "description": "Sort order ('asc' or 'desc')",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Return the list of documents of a dedicated element (from its ID or Ref) üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeDocuments",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "modulepart",
                        "type": "string",
                        "description": "Name of module or area concerned by file download ('product', ...)",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "original_file",
                        "type": "string",
                        "description": "Relative path with filename, relative to modulepart (for example: PRODUCT-REF-999/IMAGE-999.jpg)",
                        "in": "query",
                        "required": true
                    }
                ],
                "summary": "Delete a document. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents/upload": {
            "post": {
                "operationId": "createDocuments",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "createDocumentsModel",
                        "description": "**filename** (required)  \n**modulepart** (required)  \nref  \nsubdir  \nfilecontent  \nfileencoding  \noverwriteifexists  \ncreatedirifnotexists  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/createDocumentsModel"
                        }
                    }
                ],
                "summary": "Upload a file. üîê",
                "description": " Test sample for invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for supplier invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"supplier_invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for medias file: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"medias\", \"ref\": \"\", \"subdir\": \"image/mywebsite\", \"filecontent\": \"Y29udGVudCB0ZXh0Cg==\", \"fileencoding\": \"base64\", \"overwriteifexists\": \"0\" }.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/login": {
            "get": {
                "operationId": "loginLoginUnsecured",
                "tags": [
                    "login"
                ],
                "parameters": [
                    {
                        "name": "login",
                        "type": "string",
                        "description": "User login",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "description": "User password",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "entity",
                        "type": "string",
                        "description": "Entity (when multicompany module is used). '' means 1=first company.",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "reset",
                        "type": "integer",
                        "format": "int64",
                        "description": "Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Login üîì",
                "description": "Request the API token for a couple username / password. WARNING: You should NEVER use this API, like you should never use the similare API that uses the POST method. This will expose your password. To use the APIs, you should instead set an API token to the user you want to allow to use API (This API token called DOLAPIKEY can be found/set on the user page) and use this token as credential for any API call. From the API explorer, you can enter directly the \"DOLAPIKEY\" into the field at the top right of the page to get access to any allowed APIs.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            },
            "post": {
                "operationId": "listLogin",
                "tags": [
                    "login"
                ],
                "parameters": [
                    {
                        "name": "listLoginModel",
                        "description": "**login** (required)  \n**password** (required)  \nentity  \nreset  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/listLoginModel"
                        }
                    }
                ],
                "summary": "Login üîì",
                "description": "Request the API token for a couple username / password. WARNING: You should NEVER use this API, like you should never use the similare API that uses the POST method. This will expose your password. To use the APIs, you should instead set an API token to the user you want to allow to use API (This API token called DOLAPIKEY can be found/set on the user page) and use this token as credential for any API call. From the API explorer, you can enter directly the \"DOLAPIKEY\" into the field at the top right of the page to get access to any allowed APIs.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/mos/{id}": {
            "get": {
                "operationId": "retrieveMos",
                "tags": [
                    "mos"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of MO",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a MO object üîê",
                "description": "Return an array with MO informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateMos",
                "tags": [
                    "mos"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of MO to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateMosModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateMosModel"
                        }
                    }
                ],
                "summary": "Update MO üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeMos",
                "tags": [
                    "mos"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "MO ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete MO üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/mos": {
            "get": {
                "operationId": "listMos",
                "tags": [
                    "mos"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.date_creation:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List Mos üîê",
                "description": "Get a list of MOs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createMos",
                "tags": [
                    "mos"
                ],
                "parameters": [
                    {
                        "name": "createMosModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createMosModel"
                        }
                    }
                ],
                "summary": "Create MO object üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/mos/{id}/produceandconsume": {
            "post": {
                "operationId": "mosProduceAndConsume",
                "tags": [
                    "mos"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of state",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "mosProduceAndConsumeModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/mosProduceAndConsumeModel"
                        }
                    }
                ],
                "summary": "Produce and consume üîê",
                "description": "Example: { \"inventorylabel\": \"Produce and consume using API\", \"inventorycode\": \"PRODUCEAPI-YY-MM-DD\", \"autoclose\": 1, \"arraytoconsume\": [], \"arraytoproduce\": [] }",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}": {
            "get": {
                "operationId": "retrieveProducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "includestockdata",
                        "type": "integer",
                        "format": "int64",
                        "description": "Load also information about stock (slower)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includesubproducts",
                        "type": "boolean",
                        "description": "Load information about subproducts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includeparentid",
                        "type": "boolean",
                        "description": "Load also ID of parent product (if product is a variant of a parent product)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includetrans",
                        "type": "boolean",
                        "description": "Load also the translations of product label and description",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a product object by id üîê",
                "description": "Return an array with product information.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateProducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of product to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateProductsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateProductsModel"
                        }
                    }
                ],
                "summary": "Update product. üîê",
                "description": "Price will be updated by this API only if option is set on \"One price per product\". See other APIs for other price modes.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeProducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Product ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete product üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/ref/{ref}": {
            "get": {
                "operationId": "productsRetrieveByRef",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of element",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "includestockdata",
                        "type": "integer",
                        "format": "int64",
                        "description": "Load also information about stock (slower)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includesubproducts",
                        "type": "boolean",
                        "description": "Load information about subproducts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includeparentid",
                        "type": "boolean",
                        "description": "Load also ID of parent product (if product is a variant of a parent product)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includetrans",
                        "type": "boolean",
                        "description": "Load also the translations of product label and description",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a product object by ref üîê",
                "description": "Return an array with product information.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/ref_ext/{ref_ext}": {
            "get": {
                "operationId": "productsRetrieveByRefExt",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "ref_ext",
                        "type": "string",
                        "description": "Ref_ext of element",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "includestockdata",
                        "type": "integer",
                        "format": "int64",
                        "description": "Load also information about stock (slower)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includesubproducts",
                        "type": "boolean",
                        "description": "Load information about subproducts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includeparentid",
                        "type": "boolean",
                        "description": "Load also ID of parent product (if product is a variant of a parent product)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includetrans",
                        "type": "boolean",
                        "description": "Load also the translations of product label and description",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a product object by ref_ext üîê",
                "description": "Return an array with product information.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/barcode/{barcode}": {
            "get": {
                "operationId": "productsRetrieveByBarcode",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "barcode",
                        "type": "string",
                        "description": "Barcode of element",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "includestockdata",
                        "type": "integer",
                        "format": "int64",
                        "description": "Load also information about stock (slower)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includesubproducts",
                        "type": "boolean",
                        "description": "Load information about subproducts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includeparentid",
                        "type": "boolean",
                        "description": "Load also ID of parent product (if product is a variant of a parent product)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includetrans",
                        "type": "boolean",
                        "description": "Load also the translations of product label and description",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a product object by barcode üîê",
                "description": "Return an array with product information.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products": {
            "get": {
                "operationId": "listProducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.ref",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "mode",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list (0 for all, 1 for only product, 2 for only service)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "category",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list by category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.tobuy:=:0) and (t.tosell:=:1)\"",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "ids_only",
                        "type": "boolean",
                        "description": "Return only IDs of product instead of all properties (faster, above all if list is long)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "variant_filter",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list (0 = all, 1=products without variants, 2=parent of variants, 3=variants only)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "pagination_data",
                        "type": "boolean",
                        "description": "If this parameter is set to true the response will include pagination data. Default value is false. Page starts from 0",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includestockdata",
                        "type": "integer",
                        "format": "int64",
                        "description": "Load also information about stock (slower)",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List products üîê",
                "description": "Get a list of products",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createProducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "createProductsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createProductsModel"
                        }
                    }
                ],
                "summary": "Create product object üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/subproducts": {
            "get": {
                "operationId": "productsRetrieveSubproducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of parent product/service",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get the list of subproducts of the product. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/subproducts/add": {
            "post": {
                "operationId": "productsAddSubproducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of parent product/service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsAddSubproductsModel",
                        "description": "**subproduct_id** (required)  \n**qty** (required)  \nincdec  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsAddSubproductsModel"
                        }
                    }
                ],
                "summary": "Add subproduct. üîê",
                "description": " Link a product/service to a parent product/service",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/subproducts/remove/{subproduct_id}": {
            "delete": {
                "operationId": "productsDelSubproducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of parent product/service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "subproduct_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of child product/service",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Remove subproduct. üîê",
                "description": "Unlink a product/service from a parent product/service",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/categories": {
            "get": {
                "operationId": "productsRetrieveCategories",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "s.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get categories for a product üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/selling_multiprices/per_segment": {
            "get": {
                "operationId": "productsRetrieveCustomerPricesPerSegment",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of product",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get prices per segment for a product üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/selling_multiprices/per_customer": {
            "get": {
                "operationId": "productsRetrieveCustomerPricesPerCustomer",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "thirdparty_id",
                        "type": "string",
                        "description": "Thirdparty id to filter orders of (example '1')",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get prices per customer for a product üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/selling_multiprices/per_quantity": {
            "get": {
                "operationId": "productsRetrieveCustomerPricesPerQuantity",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of product",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get prices per quantity for a product üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/purchase_prices": {
            "post": {
                "operationId": "productsAddPurchasePrice",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsAddPurchasePriceModel",
                        "description": "**qty** (required)  \n**buyprice** (required)  \n**price_base_type** (required)  \n**fourn_id** (required)  \n**availability** (required)  \n**ref_fourn** (required)  \n**tva_tx** (required)  \ncharges  \nremise_percent  \nremise  \nnewnpr  \ndelivery_time_days  \nsupplier_reputation  \nlocaltaxes_array  \nnewdefaultvatcode  \nmulticurrency_buyprice  \nmulticurrency_price_base_type  \nmulticurrency_tx  \nmulticurrency_code  \ndesc_fourn  \nbarcode  \nfk_barcode_type  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsAddPurchasePriceModel"
                        }
                    }
                ],
                "summary": "Add/Update purchase prices for a product. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "get": {
                "operationId": "productsRetrievePurchasePrices",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of element",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "ref_ext",
                        "type": "string",
                        "description": "Ref ext of element",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "barcode",
                        "type": "string",
                        "description": "Barcode of element",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get purchase prices for a product üîê",
                "description": "Return an array with product information. TODO implement getting a product by ref or by $ref_ext",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/purchase_prices/{priceid}": {
            "delete": {
                "operationId": "productsRemovePurchasePrice",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Product ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "priceid",
                        "type": "integer",
                        "format": "int64",
                        "description": "purchase price ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete purchase price for a product üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/purchase_prices": {
            "get": {
                "operationId": "productsRetrieveSupplierProducts",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.ref",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "mode",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list (0 for all, 1 for only product, 2 for only service)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "category",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list by category of product",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "supplier",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list by supplier",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.tobuy:=:0) and (t.tosell:=:1)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get a list of all purchase prices of products üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes": {
            "get": {
                "operationId": "productsRetrieveAttributes",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.ref",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:color)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get attributes. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "productsAddAttributes",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "productsAddAttributesModel",
                        "description": "**ref** (required)  \n**label** (required)  \nref_ext  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsAddAttributesModel"
                        }
                    }
                ],
                "summary": "Add attributes. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes/{id}": {
            "get": {
                "operationId": "productsRetrieveAttributeById",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get attribute by ID. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "productsUpdateAttributes",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsUpdateAttributesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/productsUpdateAttributesModel"
                        }
                    }
                ],
                "summary": "Update attributes by id. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "productsRemoveAttributes",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete attributes by id. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes/ref/{ref}": {
            "get": {
                "operationId": "productsRetrieveAttributesByRef",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Reference of Attribute",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get attributes by ref. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes/ref_ext/{ref_ext}": {
            "get": {
                "operationId": "productsRetrieveAttributesByRefExt",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "ref_ext",
                        "type": "string",
                        "description": "External reference of Attribute",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get attributes by ref_ext. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes/values/{id}": {
            "get": {
                "operationId": "productsRetrieveAttributeValueById",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute value",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get attribute value by id. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "productsUpdateAttributeValue",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsUpdateAttributeValueModel",
                        "description": "**request_data** (required)  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsUpdateAttributeValueModel"
                        }
                    }
                ],
                "summary": "Update attribute value. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "productsRemoveAttributeValueById",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute value",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete attribute value by id. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes/{id}/values/ref/{ref}": {
            "get": {
                "operationId": "productsRetrieveAttributeValueByRef",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute value",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of Attribute value",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get attribute value by ref. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "productsRemoveAttributeValueByRef",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of Attribute value",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete attribute value by ref. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes/{id}/values": {
            "get": {
                "operationId": "productsRetrieveAttributeValues",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of an Attribute",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get all values for an attribute id. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "productsAddAttributeValue",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Attribute",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsAddAttributeValueModel",
                        "description": "**ref** (required)  \n**value** (required)  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsAddAttributeValueModel"
                        }
                    }
                ],
                "summary": "Add attribute value. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/attributes/ref/{ref}/values": {
            "get": {
                "operationId": "productsRetrieveAttributeValuesByRef",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of an Attribute",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get all values for an attribute ref. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/variants": {
            "get": {
                "operationId": "productsRetrieveVariants",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "includestock",
                        "type": "integer",
                        "format": "int64",
                        "description": "Default value 0. If parameter is set to 1 the response will contain stock data of each variant",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get product variants. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "productsAddVariant",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsAddVariantModel",
                        "description": "**weight_impact** (required)  \n**price_impact** (required)  \n**price_impact_is_percent** (required)  \n**features** (required)  \nreference  \nref_ext  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsAddVariantModel"
                        }
                    }
                ],
                "summary": "Add variant. üîê",
                "description": " \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/ref/{ref}/variants": {
            "get": {
                "operationId": "productsRetrieveVariantsByProdRef",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of Product",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get product variants by Product ref. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "productsAddVariantByProductRef",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of Product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsAddVariantByProductRefModel",
                        "description": "**weight_impact** (required)  \n**price_impact** (required)  \n**price_impact_is_percent** (required)  \n**features** (required)  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsAddVariantByProductRefModel"
                        }
                    }
                ],
                "summary": "Add variant by product ref. üîê",
                "description": " \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/variants/{id}": {
            "put": {
                "operationId": "productsUpdateVariant",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Variant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "productsUpdateVariantModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/productsUpdateVariantModel"
                        }
                    }
                ],
                "summary": "Put product variants. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "productsRemoveVariant",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Variant",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete product variants. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/products/{id}/stock": {
            "get": {
                "operationId": "productsRetrieveStock",
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of Product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "selected_warehouse_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of warehouse",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get stock data for the product id given. üîê",
                "description": "Optionaly with $selected_warehouse_id parameter user can get stock of specific warehouse",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ordering_methods": {
            "get": {
                "operationId": "setupRetrieveOrderingMethods",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with. Syntax example \"(t.code:=:'OrderByWWW')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of ordering methods. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ordering_origins": {
            "get": {
                "operationId": "setupRetrieveOrderingOrigins",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with. Syntax example \"(t.code:=:'OrderByWWW')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of ordering origins. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/payment_types": {
            "get": {
                "operationId": "setupRetrievePaymentTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with. Syntax example \"(t.code:=:'CHQ')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of payments types. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/states": {
            "get": {
                "operationId": "setupRetrieveListOfStates",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code_departement",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "description": "To filter the countries by name",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of states/provinces. üîê",
                "description": " The names of the states will be translated to the given language if the $lang parameter is provided. The value of $lang must be a language code supported by Dolibarr, for example 'en_US' or 'fr_FR'. The returned list is sorted by state ID.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/states/{id}": {
            "get": {
                "operationId": "setupRetrieveStateByID",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of state",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get state by ID. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/states/byCode/{code}": {
            "get": {
                "operationId": "setupRetrieveStateByCode",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "type": "string",
                        "description": "Code of state",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get state by Code. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries": {
            "get": {
                "operationId": "setupRetrieveListOfCountries",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "description": "To filter the countries by name",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the label of the countries must be translated to",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of countries. üîê",
                "description": " The names of the countries will be translated to the given language if the $lang parameter is provided. The value of $lang must be a language code supported by Dolibarr, for example 'en_US' or 'fr_FR'. The returned list is sorted by country ID.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries/{id}": {
            "get": {
                "operationId": "setupRetrieveCountryByID",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of country",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the name of the country must be translated to",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get country by ID. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries/byCode/{code}": {
            "get": {
                "operationId": "setupRetrieveCountryByCode",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "type": "string",
                        "description": "Code of country (2 characters)",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the name of the country must be translated to",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get country by Code. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries/byISO/{iso}": {
            "get": {
                "operationId": "setupRetrieveCountryByISO",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "iso",
                        "type": "string",
                        "description": "ISO of country (3 characters)",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the name of the country must be translated to",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get country by Iso. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/availability": {
            "get": {
                "operationId": "setupRetrieveAvailability",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Delivery times is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with.",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of delivery times. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/event_types": {
            "get": {
                "operationId": "setupRetrieveListOfEventTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "To filter on type of event",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module events",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Event's type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of events types. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/expensereport_types": {
            "get": {
                "operationId": "setupRetrieveListOfExpenseReportsTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Event's type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of Expense Report types. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/contact_types": {
            "get": {
                "operationId": "setupRetrieveListOfContactTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "To filter on type of contact",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module contacts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Contact's type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of contacts types. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/civilities": {
            "get": {
                "operationId": "setupRetrieveListOfCivilities",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module events",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Civility is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of civilities. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/currencies": {
            "get": {
                "operationId": "setupRetrieveListOfCurrencies",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "multicurrency",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 2,
                        "description": "Multicurrency rates (0: no multicurrency, 1: last rate, 2: all rates)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code_iso",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of currencies. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/extrafields": {
            "get": {
                "operationId": "setupRetrieveListOfExtrafields",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.pos",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Type of element ('adherent', 'commande', 'thirdparty', 'facture', 'propal', 'product', ...)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.label:like:'SO-%')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of extra fields. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/towns": {
            "get": {
                "operationId": "setupRetrieveListOfTowns",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "zip,town",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "zipcode",
                        "type": "string",
                        "description": "To filter on zipcode",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "town",
                        "type": "string",
                        "description": "To filter on city name",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Town is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of towns. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/payment_terms": {
            "get": {
                "operationId": "setupRetrievePaymentTerms",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "sortorder",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter. Syntax example \"(t.code:=:'CHQ')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of payments terms. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/shipping_methods": {
            "get": {
                "operationId": "setupRetrieveShippingModes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Shipping methodsm is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter. Syntax example \"(t.code:=:'CHQ')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of shipping methods. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/units": {
            "get": {
                "operationId": "setupRetrieveListOfMeasuringUnits",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Measuring unit is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of measuring units. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/legal_form": {
            "get": {
                "operationId": "setupRetrieveListOfLegalForm",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "country",
                        "type": "string",
                        "description": "To filter on country",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Lega form is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of legal form of business. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/staff": {
            "get": {
                "operationId": "setupRetrieveListOfStaff",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "id",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Staff is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of staff. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/socialnetworks": {
            "get": {
                "operationId": "setupRetrieveListOfsocialNetworks",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Social network is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of social networks. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ticket_categories": {
            "get": {
                "operationId": "setupRetrieveTicketsCategories",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of tickets categories. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ticket_severities": {
            "get": {
                "operationId": "setupRetrieveTicketsSeverities",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of tickets severity. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ticket_types": {
            "get": {
                "operationId": "setupRetrieveTicketsTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of tickets types. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/company": {
            "get": {
                "operationId": "setupRetrieveCompany",
                "tags": [
                    "setup"
                ],
                "parameters": [],
                "summary": "Get properties of company üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/establishments": {
            "get": {
                "operationId": "setupRetrieveEstablishments",
                "tags": [
                    "setup"
                ],
                "parameters": [],
                "summary": "Get the list of establishments. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/establishments/{id}": {
            "get": {
                "operationId": "setupRetrieveEtablishmentByID",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of establishment",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get establishment by ID. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/conf/{constantname}": {
            "get": {
                "operationId": "setupRetrieveConf",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "constantname",
                        "type": "string",
                        "description": "Name of conf variable to get",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get value of a setup variables üîê",
                "description": "Note that conf variables that stores security key or password hashes can't be loaded with API.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Error Bad or unknown value for constantname"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/checkintegrity": {
            "get": {
                "operationId": "setupRetrieveCheckIntegrity",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "target",
                        "type": "string",
                        "description": "Can be 'local' or 'default' or Url of the signatures file to use for the test. Must be reachable by the tested Dolibarr.",
                        "in": "query",
                        "required": true
                    }
                ],
                "summary": "Do a test of integrity for files and setup. üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Signature file not found"
                    },
                    "500": {
                        "description": "Technical error"
                    },
                    "503": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/modules": {
            "get": {
                "operationId": "setupRetrieveModules",
                "tags": [
                    "setup"
                ],
                "parameters": [],
                "summary": "Get list of enabled modules üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/status": {
            "get": {
                "operationId": "listStatus",
                "tags": [
                    "status"
                ],
                "parameters": [],
                "summary": "Get status (Dolibarr version) üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/stockmovements": {
            "get": {
                "operationId": "listStockmovements",
                "tags": [
                    "stockmovements"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.product_id:=:1) and (t.date_creation:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get a list of stock movement üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createStockmovements",
                "tags": [
                    "stockmovements"
                ],
                "parameters": [
                    {
                        "name": "createStockmovementsModel",
                        "description": "**product_id** (required)  \n**warehouse_id** (required)  \n**qty** (required)  \nlot  \nmovementcode  \nmovementlabel  \nprice  \ndlc  \ndluo  \norigin_type  \norigin_id  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/createStockmovementsModel"
                        }
                    }
                ],
                "summary": "Create stock movement object. üîê",
                "description": "You can use the following message to test this RES API: { \"product_id\": 1, \"warehouse_id\": 1, \"qty\": 1, \"lot\": \"\", \"movementcode\": \"INV123\", \"movementlabel\": \"Inventory 123\", \"price\": 0 } $price Can be set to update AWP (Average Weighted Price) when you make a stock increase $dlc Eat-by date. Will be used if lot does not exists yet and will be created. $dluo Sell-by date. Will be used if lot does not exists yet and will be created.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/warehouses/{id}": {
            "get": {
                "operationId": "retrieveWarehouses",
                "tags": [
                    "warehouses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of warehouse",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a warehouse object üîê",
                "description": "Return an array with warehouse informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateWarehouses",
                "tags": [
                    "warehouses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of warehouse to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateWarehousesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateWarehousesModel"
                        }
                    }
                ],
                "summary": "Update warehouse üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeWarehouses",
                "tags": [
                    "warehouses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Warehouse ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete warehouse üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/warehouses": {
            "get": {
                "operationId": "listWarehouses",
                "tags": [
                    "warehouses"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "category",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list by category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.label:like:'WH-%') and (t.date_creation:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List warehouses üîê",
                "description": "Get a list of warehouses",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createWarehouses",
                "tags": [
                    "warehouses"
                ],
                "parameters": [
                    {
                        "name": "createWarehousesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createWarehousesModel"
                        }
                    }
                ],
                "summary": "Create warehouse object üîê",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        }
    },
    "definitions": {
        "updateBomsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createBomsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "documentsBuilddocModel": {
            "properties": {
                "modulepart": {
                    "type": "string",
                    "description": "Name of module or area concerned by file download ('thirdparty', 'member', 'proposal', 'supplier_proposal', 'order', 'supplier_order', 'invoice', 'supplier_invoice', 'shipment', 'project', ...)"
                },
                "original_file": {
                    "type": "string",
                    "description": "Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf)."
                },
                "doctemplate": {
                    "type": "string",
                    "description": "Set here the doc template to use for document generation (If not set, use the default template)."
                },
                "langcode": {
                    "type": "string",
                    "description": "Language code like 'en_US', 'fr_FR', 'es_ES', ... (If not set, use the default language)."
                }
            },
            "required": [
                "modulepart"
            ]
        },
        "createDocumentsModel": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Name of file to create ('FA1705-0123.txt')"
                },
                "modulepart": {
                    "type": "string",
                    "description": "Name of module or area concerned by file upload ('product', 'service', 'invoice', 'proposal', 'project', 'project_task', 'supplier_invoice', 'expensereport', 'member', ...)"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference of object (This will define subdir automatically and store submited file into it)"
                },
                "subdir": {
                    "type": "string",
                    "description": "Subdirectory (Only if ref not provided)"
                },
                "filecontent": {
                    "type": "string",
                    "description": "File content (string with file content. An empty file will be created if this parameter is not provided)"
                },
                "fileencoding": {
                    "type": "string",
                    "description": "File encoding (''=no encoding, 'base64'=Base 64)"
                },
                "overwriteifexists": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Overwrite file if exists (1 by default)"
                },
                "createdirifnotexists": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Create subdirectories if the doesn't exists (1 by default)",
                    "defaultValue": 1
                }
            },
            "required": [
                "filename",
                "modulepart"
            ]
        },
        "listLoginModel": {
            "properties": {
                "login": {
                    "type": "string",
                    "description": "User login"
                },
                "password": {
                    "type": "string",
                    "description": "User password"
                },
                "entity": {
                    "type": "string",
                    "description": "Entity (when multicompany module is used). '' means 1=first company."
                },
                "reset": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)"
                }
            },
            "required": [
                "login",
                "password"
            ]
        },
        "updateMosModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createMosModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "mosProduceAndConsumeModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "updateProductsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createProductsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "productsAddSubproductsModel": {
            "properties": {
                "subproduct_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Id of child product/service"
                },
                "qty": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Quantity"
                },
                "incdec": {
                    "type": "integer",
                    "format": "int64",
                    "description": "1=Increase/decrease stock of child when parent stock increase/decrease",
                    "defaultValue": 1
                }
            },
            "required": [
                "subproduct_id",
                "qty"
            ]
        },
        "productsAddPurchasePriceModel": {
            "properties": {
                "qty": {
                    "type": "number",
                    "format": "double",
                    "description": "Min quantity for which price is valid"
                },
                "buyprice": {
                    "type": "number",
                    "format": "double",
                    "description": "Purchase price for the quantity min"
                },
                "price_base_type": {
                    "type": "string",
                    "description": "HT or TTC"
                },
                "fourn_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Supplier ID"
                },
                "availability": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Product availability"
                },
                "ref_fourn": {
                    "type": "string",
                    "description": "Supplier ref"
                },
                "tva_tx": {
                    "type": "number",
                    "format": "double",
                    "description": "New VAT Rate (For example 8.5. Should not be a string)"
                },
                "charges": {
                    "type": "string",
                    "description": "costs affering to product"
                },
                "remise_percent": {
                    "type": "number",
                    "format": "double",
                    "description": "Discount regarding qty (percent)"
                },
                "remise": {
                    "type": "number",
                    "format": "double",
                    "description": "Discount regarding qty (amount)"
                },
                "newnpr": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Set NPR or not"
                },
                "delivery_time_days": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Delay in days for delivery (max). May be '' if not defined."
                },
                "supplier_reputation": {
                    "type": "string",
                    "description": "Reputation with this product to the defined supplier (empty, FAVORITE, DONOTORDER)"
                },
                "localtaxes_array": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array with localtaxes info array('0'=>type1,'1'=>rate1,'2'=>type2,'3'=>rate2) (loaded by getLocalTaxesFromRate(vatrate, 0, ...) function)."
                },
                "newdefaultvatcode": {
                    "type": "string",
                    "description": "Default vat code"
                },
                "multicurrency_buyprice": {
                    "type": "number",
                    "format": "double",
                    "description": "Purchase price for the quantity min in currency"
                },
                "multicurrency_price_base_type": {
                    "type": "string",
                    "description": "HT or TTC in currency",
                    "defaultValue": "HT"
                },
                "multicurrency_tx": {
                    "type": "number",
                    "format": "double",
                    "description": "Rate currency",
                    "defaultValue": 1
                },
                "multicurrency_code": {
                    "type": "string",
                    "description": "Currency code"
                },
                "desc_fourn": {
                    "type": "string",
                    "description": "Custom description for product_fourn_price"
                },
                "barcode": {
                    "type": "string",
                    "description": "Barcode"
                },
                "fk_barcode_type": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Barcode type"
                }
            },
            "required": [
                "qty",
                "buyprice",
                "price_base_type",
                "fourn_id",
                "availability",
                "ref_fourn",
                "tva_tx"
            ]
        },
        "productsAddAttributesModel": {
            "properties": {
                "ref": {
                    "type": "string",
                    "description": "Reference of Attribute"
                },
                "label": {
                    "type": "string",
                    "description": "Label of Attribute"
                },
                "ref_ext": {
                    "type": "string",
                    "description": "Reference of Attribute"
                }
            },
            "required": [
                "ref",
                "label"
            ]
        },
        "productsUpdateAttributesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "productsUpdateAttributeValueModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            },
            "required": [
                "request_data"
            ]
        },
        "productsAddAttributeValueModel": {
            "properties": {
                "ref": {
                    "type": "string",
                    "description": "Reference of Attribute value"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Attribute value"
                }
            },
            "required": [
                "ref",
                "value"
            ]
        },
        "productsAddVariantModel": {
            "properties": {
                "weight_impact": {
                    "type": "number",
                    "format": "double",
                    "description": "Weight impact of variant"
                },
                "price_impact": {
                    "type": "number",
                    "format": "double",
                    "description": "Price impact of variant"
                },
                "price_impact_is_percent": {
                    "type": "boolean",
                    "description": "Price impact in percent (true or false)"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of attributes pairs id_attribute->id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)"
                },
                "reference": {
                    "type": "string",
                    "description": "Customized reference of variant"
                },
                "ref_ext": {
                    "type": "string",
                    "description": "External reference of variant"
                }
            },
            "required": [
                "weight_impact",
                "price_impact",
                "price_impact_is_percent",
                "features"
            ]
        },
        "productsAddVariantByProductRefModel": {
            "properties": {
                "weight_impact": {
                    "type": "number",
                    "format": "double",
                    "description": "Weight impact of variant"
                },
                "price_impact": {
                    "type": "number",
                    "format": "double",
                    "description": "Price impact of variant"
                },
                "price_impact_is_percent": {
                    "type": "boolean",
                    "description": "Price impact in percent (true or false)"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of attributes pairs id_attribute->id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)"
                }
            },
            "required": [
                "weight_impact",
                "price_impact",
                "price_impact_is_percent",
                "features"
            ]
        },
        "productsUpdateVariantModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createStockmovementsModel": {
            "properties": {
                "product_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Id product id",
                    "minimum": 1
                },
                "warehouse_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Id warehouse",
                    "minimum": 1
                },
                "qty": {
                    "type": "number",
                    "format": "double",
                    "description": "Qty to add (Use negative value for a stock decrease)"
                },
                "lot": {
                    "type": "string",
                    "description": "Lot"
                },
                "movementcode": {
                    "type": "string",
                    "description": "Movement code"
                },
                "movementlabel": {
                    "type": "string",
                    "description": "Movement label"
                },
                "price": {
                    "type": "string",
                    "description": "To update AWP (Average Weighted Price) when you make a stock increase (qty must be higher then 0)."
                },
                "dlc": {
                    "type": "string",
                    "format": "date",
                    "description": "Eat-by date."
                },
                "dluo": {
                    "type": "string",
                    "format": "date",
                    "description": "Sell-by date."
                },
                "origin_type": {
                    "type": "string",
                    "description": "Origin type (Element of source object, like 'project', 'inventory', ...)"
                },
                "origin_id": {
                    "type": "string",
                    "description": "Origin id (Id of source object)"
                }
            },
            "required": [
                "product_id",
                "warehouse_id",
                "qty"
            ]
        },
        "updateWarehousesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createWarehousesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "query"
        }
    },
    "info": {
        "version": "1",
        "title": "Restler API Explorer",
        "description": "Live API Documentation",
        "contact": {
            "name": "Restler Support",
            "url": "luracast.com/products/restler",
            "email": "arul@luracast.com"
        },
        "license": {
            "name": "LGPL-2.1",
            "url": "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"
        }
    }
}
