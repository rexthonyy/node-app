{
    "swagger": "2.0",
    "host": "88.208.212.245",
    "basePath": "/api/index.php",
    "produces": [
        "application/json",
        "application/xml"
    ],
    "consumes": [
        "application/json",
        "application/xml",
        "multipart/form-data"
    ],
    "paths": {
        "/bankaccounts": {
            "get": {
                "operationId": "listBankaccounts",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "category",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list by category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.import_key:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of accounts. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createBankaccounts",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "createBankaccountsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createBankaccountsModel"
                        }
                    }
                ],
                "summary": "Create account object ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/bankaccounts/{id}": {
            "get": {
                "operationId": "retrieveBankaccounts",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of account",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get account by ID. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateBankaccounts",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of account",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateBankaccountsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateBankaccountsModel"
                        }
                    }
                ],
                "summary": "Update account ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeBankaccounts",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of account",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete account ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/bankaccounts/transfer": {
            "post": {
                "operationId": "bankaccountsTransfer",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "bankaccountsTransferModel",
                        "description": "bankaccount_from_id  \nbankaccount_to_id  \ndate  \ndescription  \namount  \namount_to  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bankaccountsTransferModel"
                        }
                    }
                ],
                "summary": "Create an internal wire transfer between two bank accounts ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User does not have permission to configure bank accounts"
                    },
                    "404": {
                        "description": "Not Found: Either the source or the destination bankaccount for the provided id does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error: Error(s) returned by the RDBMS"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/bankaccounts/{id}/lines": {
            "get": {
                "operationId": "bankaccountsRetrieveLines",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of account",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.import_key:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of lines of the account. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "bankaccountsAddLine",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of account",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "bankaccountsAddLineModel",
                        "description": "**date** (required)  \n**type** (required)  \n**label** (required)  \n**amount** (required)  \ncategory  \ncheque_number  \ncheque_writer  \ncheque_bank  \naccountancycode  \ndatev  \nnum_releve  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bankaccountsAddLineModel"
                        }
                    }
                ],
                "summary": "Add a line to an account ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/bankaccounts/{id}/lines/{line_id}/links": {
            "post": {
                "operationId": "bankaccountsAddLink",
                "tags": [
                    "bankaccounts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of account",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "line_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of account line",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "bankaccountsAddLinkModel",
                        "description": "**url_id** (required)  \n**url** (required)  \n**label** (required)  \n**type** (required)  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bankaccountsAddLinkModel"
                        }
                    }
                ],
                "summary": "Add a link to an account line ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/contacts/{id}": {
            "get": {
                "operationId": "retrieveContacts",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of contact",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "includecount",
                        "type": "integer",
                        "format": "int64",
                        "description": "Count and return also number of elements the contact is used as a link for",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includeroles",
                        "type": "integer",
                        "format": "int64",
                        "description": "Includes roles of the contact",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a contact object ??",
                "description": "Return an array with contact informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateContacts",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of contact to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateContactsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateContactsModel"
                        }
                    }
                ],
                "summary": "Update contact ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeContacts",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Contact ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete contact ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/contacts/email/{email}": {
            "get": {
                "operationId": "contactsRetrieveByEmail",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "type": "string",
                        "description": "Email of contact",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "includecount",
                        "type": "integer",
                        "format": "int64",
                        "description": "Count and return also number of elements the contact is used as a link for",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includeroles",
                        "type": "integer",
                        "format": "int64",
                        "description": "Includes roles of the contact",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a contact object by Email ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Insufficient rights"
                    },
                    "404": {
                        "description": "User or group not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/contacts": {
            "get": {
                "operationId": "listContacts",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "thirdparty_ids",
                        "type": "string",
                        "description": "Thirdparty ids to filter contacts of (example '1' or '1,2,3')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "category",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list by category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.date_creation:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includecount",
                        "type": "integer",
                        "format": "int64",
                        "description": "Count and return also number of elements the contact is used as a link for",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "includeroles",
                        "type": "integer",
                        "format": "int64",
                        "description": "Includes roles of the contact",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List contacts ??",
                "description": "Get a list of contacts",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createContacts",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "createContactsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createContactsModel"
                        }
                    }
                ],
                "summary": "Create contact object ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/contacts/{id}/createUser": {
            "post": {
                "operationId": "contactsCreateUser",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of contact",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contactsCreateUserModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/contactsCreateUserModel"
                        }
                    }
                ],
                "summary": "Create an user account object from contact (external user) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/contacts/{id}/categories": {
            "get": {
                "operationId": "contactsRetrieveCategories",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of contact",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "s.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get categories for a contact ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/contacts/{id}/categories/{category_id}": {
            "post": {
                "operationId": "contactsAddCategory",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of contact",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of category",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Add a category to a contact ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Insufficient rights"
                    },
                    "404": {
                        "description": "Category or contact not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "contactsRemoveCategory",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of contact",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of category",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Remove the link between a category and a contact ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "404 Category or contact not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents/download": {
            "get": {
                "operationId": "listDocuments",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "modulepart",
                        "type": "string",
                        "description": "Name of module or area concerned by file download ('facture', ...)",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "original_file",
                        "type": "string",
                        "description": "Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf)",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Download a document. ??",
                "description": " Note that, this API is similar to using the wrapper link \"documents.php\" to download a file (used for internal HTML links of documents into application), but with no need to have a session cookie (the token is used instead).",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents/builddoc": {
            "put": {
                "operationId": "documentsBuilddoc",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "documentsBuilddocModel",
                        "description": "**modulepart** (required)  \noriginal_file  \ndoctemplate  \nlangcode  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/documentsBuilddocModel"
                        }
                    }
                ],
                "summary": "Build a document. ??",
                "description": " Test sample 1: { \"modulepart\": \"invoice\", \"original_file\": \"FA1701-001/FA1701-001.pdf\", \"doctemplate\": \"crabe\", \"langcode\": \"fr_FR\" }.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    },
                    "501": {
                        "description": "Not Implemented"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents": {
            "get": {
                "operationId": "documentsRetrieveDocumentsListByElement",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "modulepart",
                        "type": "string",
                        "description": "Name of module or area concerned ('thirdparty', 'member', 'proposal', 'order', 'invoice', 'supplier_invoice', 'shipment', 'project', ...)",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of element",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of element",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "description": "Sort criteria ('','fullname','relativename','name','date','size')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "description": "Sort order ('asc' or 'desc')",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Return the list of documents of a dedicated element (from its ID or Ref) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeDocuments",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "modulepart",
                        "type": "string",
                        "description": "Name of module or area concerned by file download ('product', ...)",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "original_file",
                        "type": "string",
                        "description": "Relative path with filename, relative to modulepart (for example: PRODUCT-REF-999/IMAGE-999.jpg)",
                        "in": "query",
                        "required": true
                    }
                ],
                "summary": "Delete a document. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/documents/upload": {
            "post": {
                "operationId": "createDocuments",
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "name": "createDocumentsModel",
                        "description": "**filename** (required)  \n**modulepart** (required)  \nref  \nsubdir  \nfilecontent  \nfileencoding  \noverwriteifexists  \ncreatedirifnotexists  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/createDocumentsModel"
                        }
                    }
                ],
                "summary": "Upload a file. ??",
                "description": " Test sample for invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for supplier invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"supplier_invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for medias file: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"medias\", \"ref\": \"\", \"subdir\": \"image/mywebsite\", \"filecontent\": \"Y29udGVudCB0ZXh0Cg==\", \"fileencoding\": \"base64\", \"overwriteifexists\": \"0\" }.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/donations/{id}": {
            "get": {
                "operationId": "retrieveDonations",
                "tags": [
                    "donations"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of order",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of an donation object ??",
                "description": "Return an array with donation informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateDonations",
                "tags": [
                    "donations"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of order to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateDonationsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateDonationsModel"
                        }
                    }
                ],
                "summary": "Update order general fields (won't touch lines of order) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeDonations",
                "tags": [
                    "donations"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete donation ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/donations": {
            "get": {
                "operationId": "listDonations",
                "tags": [
                    "donations"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "thirdparty_ids",
                        "type": "string",
                        "description": "Thirdparty ids to filter orders of (example '1' or '1,2,3')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.date_creation:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List donations ??",
                "description": "Get a list of donations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createDonations",
                "tags": [
                    "donations"
                ],
                "parameters": [
                    {
                        "name": "createDonationsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createDonationsModel"
                        }
                    }
                ],
                "summary": "Create donation object ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/donations/{id}/validate": {
            "post": {
                "operationId": "donationsValidate",
                "tags": [
                    "donations"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "donationsValidateModel",
                        "description": "idwarehouse  \nnotrigger  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/donationsValidateModel"
                        }
                    }
                ],
                "summary": "Validate an donation ??",
                "description": "If you get a bad value for param notrigger check, provide this in body { \"idwarehouse\": 0, \"notrigger\": 0 }",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}": {
            "get": {
                "operationId": "retrieveInvoices",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contact_list",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "description": "0:Return array contains all properties, 1:Return array contains just id",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a invoice object ??",
                "description": "Return an array with invoice informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateInvoices",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateInvoicesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateInvoicesModel"
                        }
                    }
                ],
                "summary": "Update invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeInvoices",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Invoice ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/ref/{ref}": {
            "get": {
                "operationId": "invoicesRetrieveByRef",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of object",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contact_list",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "description": "0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of an invoice object by ref ??",
                "description": "Return an array with invoice informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/ref_ext/{ref_ext}": {
            "get": {
                "operationId": "invoicesRetrieveByRefExt",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "ref_ext",
                        "type": "string",
                        "description": "External reference of object",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contact_list",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "description": "0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of an invoice object by ref_ext ??",
                "description": "Return an array with invoice informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices": {
            "get": {
                "operationId": "listInvoices",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "thirdparty_ids",
                        "type": "string",
                        "description": "Thirdparty ids to filter orders of (example '1' or '1,2,3')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "description": "Filter by invoice status : draft | unpaid | paid | cancelled",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.date_creation:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List invoices ??",
                "description": "Get a list of invoices",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "503": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createInvoices",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "createInvoicesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createInvoicesModel"
                        }
                    }
                ],
                "summary": "Create invoice object ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/createfromorder/{orderid}": {
            "post": {
                "operationId": "invoicesCreateInvoiceFromOrder",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "orderid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of the order",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Create an invoice using an existing order. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/lines": {
            "get": {
                "operationId": "invoicesRetrieveLines",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get lines of an invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "invoicesCreateLine",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesCreateLineModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/invoicesCreateLineModel"
                        }
                    }
                ],
                "summary": "Add a line to a given invoice ??",
                "description": "Exemple of POST query : { \"desc\": \"Desc\", \"subprice\": \"1.00000000\", \"qty\": \"1\", \"tva_tx\": \"20.000\", \"localtax1_tx\": \"0.000\", \"localtax2_tx\": \"0.000\", \"fk_product\": \"1\", \"remise_percent\": \"0\", \"date_start\": \"\", \"date_end\": \"\", \"fk_code_ventilation\": 0, \"info_bits\": \"0\", \"fk_remise_except\": null, \"product_type\": \"1\", \"rang\": \"-1\", \"special_code\": \"0\", \"fk_parent_line\": null, \"fk_fournprice\": null, \"pa_ht\": \"0.00000000\", \"label\": \"\", \"array_options\": [], \"situation_percent\": \"100\", \"fk_prev_id\": null, \"fk_unit\": null }",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/lines/{lineid}": {
            "put": {
                "operationId": "invoicesUpdateLine",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lineid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of line to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesUpdateLineModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/invoicesUpdateLineModel"
                        }
                    }
                ],
                "summary": "Update a line to a given invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "invoicesRemoveLine",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lineid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of the line to delete",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Deletes a line of a given invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/contact/{contactid}/{type}": {
            "post": {
                "operationId": "invoicesCreateContact",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contactid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of contact to add",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Type of the contact (BILLING, SHIPPING, CUSTOMER)",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Add a contact type of given invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "invoicesRemoveContact",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contactid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Row key of the contact in the array contact_ids.",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Type of the contact (BILLING, SHIPPING, CUSTOMER).",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete a contact type of given invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/contacts": {
            "post": {
                "operationId": "invoicesAddContact",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesAddContactModel",
                        "description": "**fk_socpeople** (required)  \n**type_contact** (required)  \n**source** (required)  \nnotrigger  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invoicesAddContactModel"
                        }
                    }
                ],
                "summary": "Adds a contact to an invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/settodraft": {
            "post": {
                "operationId": "invoicesSettodraft",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesSettodraftModel",
                        "description": "idwarehouse  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/invoicesSettodraftModel"
                        }
                    }
                ],
                "summary": "Sets an invoice as draft ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/validate": {
            "post": {
                "operationId": "invoicesValidate",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Invoice ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesValidateModel",
                        "description": "idwarehouse  \nnotrigger  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/invoicesValidateModel"
                        }
                    }
                ],
                "summary": "Validate an invoice ??",
                "description": "If you get a bad value for param notrigger check that ou provide this in body { \"idwarehouse\": 0, \"notrigger\": 0 }",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/settopaid": {
            "post": {
                "operationId": "invoicesSettopaid",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesSettopaidModel",
                        "description": "close_code  \nclose_note  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/invoicesSettopaidModel"
                        }
                    }
                ],
                "summary": "Sets an invoice as paid ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/settounpaid": {
            "post": {
                "operationId": "invoicesSettounpaid",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Sets an invoice as unpaid ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/discount": {
            "get": {
                "operationId": "invoicesRetrieveDiscount",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get discount from invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/markAsCreditAvailable": {
            "post": {
                "operationId": "invoicesMarkAsCreditAvailable",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Invoice ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Create a discount (credit available) for a credit note or a deposit. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/usediscount/{discountid}": {
            "post": {
                "operationId": "invoicesUseDiscount",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "discountid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of discount",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Add a discount line into an invoice (as an invoice line) using an existing absolute discount ??",
                "description": "Note that this consume the discount.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/usecreditnote/{discountid}": {
            "post": {
                "operationId": "invoicesUseCreditNote",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "discountid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of a discount coming from a credit note",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Add an available credit note discount to payments of an existing invoice. ??",
                "description": " Note that this consume the credit note.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/{id}/payments": {
            "get": {
                "operationId": "invoicesRetrievePayments",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get list of payments of a given invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "invoicesAddPayment",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesAddPaymentModel",
                        "description": "**datepaye** (required)  \n**paymentid** (required)  \n**closepaidinvoices** (required)  \n**accountid** (required)  \nnum_payment  \ncomment  \nchqemetteur  \nchqbank  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invoicesAddPaymentModel"
                        }
                    }
                ],
                "summary": "Add payment line to a specific invoice with the remain to pay as amount. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/paymentsdistributed": {
            "post": {
                "operationId": "invoicesAddPaymentDistributed",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "invoicesAddPaymentDistributedModel",
                        "description": "**arrayofamounts** (required)  \n**datepaye** (required)  \n**paymentid** (required)  \n**closepaidinvoices** (required)  \n**accountid** (required)  \nnum_payment  \ncomment  \nchqemetteur  \nchqbank  \nref_ext  \naccepthigherpayment  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invoicesAddPaymentDistributedModel"
                        }
                    }
                ],
                "summary": "Add a payment to pay partially or completely one or several invoices. ??",
                "description": "Warning: Take care that all invoices are owned by the same customer. Example of value for parameter arrayofamounts: {\"1\": {\"amount\": \"99.99\", \"multicurrency_amount\": \"\"}, \"2\": {\"amount\": \"\", \"multicurrency_amount\": \"10\"}}",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/invoices/payments/{id}": {
            "put": {
                "operationId": "invoicesUpdatePayment",
                "tags": [
                    "invoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of payment",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "invoicesUpdatePaymentModel",
                        "description": "num_payment  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/invoicesUpdatePaymentModel"
                        }
                    }
                ],
                "summary": "Update a payment ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad parameters"
                    },
                    "401": {
                        "description": "Not allowed"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/login": {
            "get": {
                "operationId": "loginLoginUnsecured",
                "tags": [
                    "login"
                ],
                "parameters": [
                    {
                        "name": "login",
                        "type": "string",
                        "description": "User login",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "description": "User password",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "entity",
                        "type": "string",
                        "description": "Entity (when multicompany module is used). '' means 1=first company.",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "reset",
                        "type": "integer",
                        "format": "int64",
                        "description": "Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Login ??",
                "description": "Request the API token for a couple username / password. WARNING: You should NEVER use this API, like you should never use the similare API that uses the POST method. This will expose your password. To use the APIs, you should instead set an API token to the user you want to allow to use API (This API token called DOLAPIKEY can be found/set on the user page) and use this token as credential for any API call. From the API explorer, you can enter directly the \"DOLAPIKEY\" into the field at the top right of the page to get access to any allowed APIs.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            },
            "post": {
                "operationId": "listLogin",
                "tags": [
                    "login"
                ],
                "parameters": [
                    {
                        "name": "listLoginModel",
                        "description": "**login** (required)  \n**password** (required)  \nentity  \nreset  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/listLoginModel"
                        }
                    }
                ],
                "summary": "Login ??",
                "description": "Request the API token for a couple username / password. WARNING: You should NEVER use this API, like you should never use the similare API that uses the POST method. This will expose your password. To use the APIs, you should instead set an API token to the user you want to allow to use API (This API token called DOLAPIKEY can be found/set on the user page) and use this token as credential for any API call. From the API explorer, you can enter directly the \"DOLAPIKEY\" into the field at the top right of the page to get access to any allowed APIs.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/proposals/{id}": {
            "get": {
                "operationId": "retrieveProposals",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of commercial proposal",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contact_list",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "description": "0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of a commercial proposal object ??",
                "description": "Return an array with commercial proposal informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateProposals",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of commercial proposal to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateProposalsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateProposalsModel"
                        }
                    }
                ],
                "summary": "Update commercial proposal general fields (won't touch lines of commercial proposal) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeProposals",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Commercial proposal ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/ref/{ref}": {
            "get": {
                "operationId": "proposalsRetrieveByRef",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "ref",
                        "type": "string",
                        "description": "Ref of object",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contact_list",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "description": "0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of an proposal object by ref ??",
                "description": "Return an array with proposal informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/ref_ext/{ref_ext}": {
            "get": {
                "operationId": "proposalsRetrieveByRefExt",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "ref_ext",
                        "type": "string",
                        "description": "External reference of object",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contact_list",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "description": "0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get properties of an proposal object by ref_ext ??",
                "description": "Return an array with proposal informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals": {
            "get": {
                "operationId": "listProposals",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "thirdparty_ids",
                        "type": "string",
                        "description": "Thirdparty ids to filter commercial proposals (example '1' or '1,2,3')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.datec:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List commercial proposals ??",
                "description": "Get a list of commercial proposals",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createProposals",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "createProposalsModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createProposalsModel"
                        }
                    }
                ],
                "summary": "Create commercial proposal object ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/{id}/lines": {
            "get": {
                "operationId": "proposalsRetrieveLines",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of commercial proposal",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get lines of a commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "proposalsCreateLine",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of commercial proposal to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "proposalsCreateLineModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/proposalsCreateLineModel"
                        }
                    }
                ],
                "summary": "Add a line to given commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/{id}/lines/{lineid}": {
            "put": {
                "operationId": "proposalsUpdateLine",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of commercial proposal to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lineid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of line to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "proposalsUpdateLineModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/proposalsUpdateLineModel"
                        }
                    }
                ],
                "summary": "Update a line of given commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "proposalsRemoveLine",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of commercial proposal to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lineid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of line to delete",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete a line of given commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/{id}/contact/{contactid}/{type}": {
            "post": {
                "operationId": "proposalsCreateContact",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of commercial proposal to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contactid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of contact to add",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Type of the contact (BILLING, SHIPPING, CUSTOMER)",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Add a contact type of given commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "proposalsRemoveContact",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of commercial proposal to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "contactid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Row key of the contact in the array contact_ids.",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Type of the contact (BILLING, SHIPPING, CUSTOMER).",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete a contact type of given commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/{id}/settodraft": {
            "post": {
                "operationId": "proposalsSettodraft",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Set a proposal to draft ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/{id}/validate": {
            "post": {
                "operationId": "proposalsValidate",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Commercial proposal ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "proposalsValidateModel",
                        "description": "notrigger  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/proposalsValidateModel"
                        }
                    }
                ],
                "summary": "Validate a commercial proposal ??",
                "description": "If you get a bad value for param notrigger check that ou provide this in body { \"notrigger\": 0 }",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/{id}/close": {
            "post": {
                "operationId": "proposalsClose",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Commercial proposal ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "proposalsCloseModel",
                        "description": "**status** (required)  \nnote_private  \nnotrigger  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proposalsCloseModel"
                        }
                    }
                ],
                "summary": "Close (Accept or refuse) a quote / commercial proposal ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/proposals/{id}/setinvoiced": {
            "post": {
                "operationId": "proposalsSetinvoiced",
                "tags": [
                    "proposals"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Commercial proposal ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Set a commercial proposal billed. Could be also called setbilled ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ordering_methods": {
            "get": {
                "operationId": "setupRetrieveOrderingMethods",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with. Syntax example \"(t.code:=:'OrderByWWW')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of ordering methods. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ordering_origins": {
            "get": {
                "operationId": "setupRetrieveOrderingOrigins",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with. Syntax example \"(t.code:=:'OrderByWWW')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of ordering origins. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/payment_types": {
            "get": {
                "operationId": "setupRetrievePaymentTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with. Syntax example \"(t.code:=:'CHQ')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of payments types. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/states": {
            "get": {
                "operationId": "setupRetrieveListOfStates",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code_departement",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "description": "To filter the countries by name",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of states/provinces. ??",
                "description": " The names of the states will be translated to the given language if the $lang parameter is provided. The value of $lang must be a language code supported by Dolibarr, for example 'en_US' or 'fr_FR'. The returned list is sorted by state ID.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/states/{id}": {
            "get": {
                "operationId": "setupRetrieveStateByID",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of state",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get state by ID. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/states/byCode/{code}": {
            "get": {
                "operationId": "setupRetrieveStateByCode",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "type": "string",
                        "description": "Code of state",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get state by Code. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries": {
            "get": {
                "operationId": "setupRetrieveListOfCountries",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "description": "To filter the countries by name",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the label of the countries must be translated to",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of countries. ??",
                "description": " The names of the countries will be translated to the given language if the $lang parameter is provided. The value of $lang must be a language code supported by Dolibarr, for example 'en_US' or 'fr_FR'. The returned list is sorted by country ID.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries/{id}": {
            "get": {
                "operationId": "setupRetrieveCountryByID",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of country",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the name of the country must be translated to",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get country by ID. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries/byCode/{code}": {
            "get": {
                "operationId": "setupRetrieveCountryByCode",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "type": "string",
                        "description": "Code of country (2 characters)",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the name of the country must be translated to",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get country by Code. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/countries/byISO/{iso}": {
            "get": {
                "operationId": "setupRetrieveCountryByISO",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "iso",
                        "type": "string",
                        "description": "ISO of country (3 characters)",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "description": "Code of the language the name of the country must be translated to",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get country by Iso. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/availability": {
            "get": {
                "operationId": "setupRetrieveAvailability",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Delivery times is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter with.",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of delivery times. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/event_types": {
            "get": {
                "operationId": "setupRetrieveListOfEventTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "To filter on type of event",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module events",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Event's type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of events types. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/expensereport_types": {
            "get": {
                "operationId": "setupRetrieveListOfExpenseReportsTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Event's type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of Expense Report types. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/contact_types": {
            "get": {
                "operationId": "setupRetrieveListOfContactTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "To filter on type of contact",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module contacts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Contact's type is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of contacts types. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/civilities": {
            "get": {
                "operationId": "setupRetrieveListOfCivilities",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "module",
                        "type": "string",
                        "description": "To filter on module events",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Civility is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of civilities. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/currencies": {
            "get": {
                "operationId": "setupRetrieveListOfCurrencies",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "multicurrency",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 2,
                        "description": "Multicurrency rates (0: no multicurrency, 1: last rate, 2: all rates)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code_iso",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of currencies. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/extrafields": {
            "get": {
                "operationId": "setupRetrieveListOfExtrafields",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.pos",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Type of element ('adherent', 'commande', 'thirdparty', 'facture', 'propal', 'product', ...)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.label:like:'SO-%')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of extra fields. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/towns": {
            "get": {
                "operationId": "setupRetrieveListOfTowns",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "zip,town",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "zipcode",
                        "type": "string",
                        "description": "To filter on zipcode",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "town",
                        "type": "string",
                        "description": "To filter on city name",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Town is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of towns. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/payment_terms": {
            "get": {
                "operationId": "setupRetrievePaymentTerms",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "sortorder",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter. Syntax example \"(t.code:=:'CHQ')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of payments terms. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/shipping_methods": {
            "get": {
                "operationId": "setupRetrieveShippingModes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Shipping methodsm is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "SQL criteria to filter. Syntax example \"(t.code:=:'CHQ')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of shipping methods. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/units": {
            "get": {
                "operationId": "setupRetrieveListOfMeasuringUnits",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Measuring unit is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of measuring units. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/legal_form": {
            "get": {
                "operationId": "setupRetrieveListOfLegalForm",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "country",
                        "type": "string",
                        "description": "To filter on country",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Lega form is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of legal form of business. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/staff": {
            "get": {
                "operationId": "setupRetrieveListOfStaff",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "id",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Staff is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of staff. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/socialnetworks": {
            "get": {
                "operationId": "setupRetrieveListOfsocialNetworks",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Social network is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of social networks. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ticket_categories": {
            "get": {
                "operationId": "setupRetrieveTicketsCategories",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of tickets categories. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ticket_severities": {
            "get": {
                "operationId": "setupRetrieveTicketsSeverities",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of tickets severity. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/dictionary/ticket_types": {
            "get": {
                "operationId": "setupRetrieveTicketsTypes",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "code",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Number of items per page",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number (starting from zero)",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "active",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 1,
                        "maximum": 1,
                        "description": "Payment term is active or not",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.code:like:'A%') and (t.active:>=:0)\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get the list of tickets types. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/company": {
            "get": {
                "operationId": "setupRetrieveCompany",
                "tags": [
                    "setup"
                ],
                "parameters": [],
                "summary": "Get properties of company ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/establishments": {
            "get": {
                "operationId": "setupRetrieveEstablishments",
                "tags": [
                    "setup"
                ],
                "parameters": [],
                "summary": "Get the list of establishments. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/establishments/{id}": {
            "get": {
                "operationId": "setupRetrieveEtablishmentByID",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of establishment",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get establishment by ID. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/conf/{constantname}": {
            "get": {
                "operationId": "setupRetrieveConf",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "constantname",
                        "type": "string",
                        "description": "Name of conf variable to get",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get value of a setup variables ??",
                "description": "Note that conf variables that stores security key or password hashes can't be loaded with API.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Error Bad or unknown value for constantname"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/checkintegrity": {
            "get": {
                "operationId": "setupRetrieveCheckIntegrity",
                "tags": [
                    "setup"
                ],
                "parameters": [
                    {
                        "name": "target",
                        "type": "string",
                        "description": "Can be 'local' or 'default' or Url of the signatures file to use for the test. Must be reachable by the tested Dolibarr.",
                        "in": "query",
                        "required": true
                    }
                ],
                "summary": "Do a test of integrity for files and setup. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Signature file not found"
                    },
                    "500": {
                        "description": "Technical error"
                    },
                    "503": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/setup/modules": {
            "get": {
                "operationId": "setupRetrieveModules",
                "tags": [
                    "setup"
                ],
                "parameters": [],
                "summary": "Get list of enabled modules ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/status": {
            "get": {
                "operationId": "listStatus",
                "tags": [
                    "status"
                ],
                "parameters": [],
                "summary": "Get status (Dolibarr version) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierinvoices/{id}": {
            "get": {
                "operationId": "retrieveSupplierinvoices",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of supplier invoice",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a supplier invoice object ??",
                "description": "Return an array with supplier invoice information",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateSupplierinvoices",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of supplier invoice to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateSupplierinvoicesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateSupplierinvoicesModel"
                        }
                    }
                ],
                "summary": "Update supplier invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeSupplierinvoices",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Supplier invoice ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete supplier invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierinvoices": {
            "get": {
                "operationId": "listSupplierinvoices",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "thirdparty_ids",
                        "type": "string",
                        "description": "Thirdparty ids to filter invoices of (example '1' or '1,2,3')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "description": "Filter by invoice status : draft | unpaid | paid | cancelled",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.datec:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List invoices ??",
                "description": "Get a list of supplier invoices",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createSupplierinvoices",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "createSupplierinvoicesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createSupplierinvoicesModel"
                        }
                    }
                ],
                "summary": "Create supplier invoice object ??",
                "description": "Note: soc_id = dolibarr_order_id Example: {'ref': 'auto', 'ref_supplier': '7985630', 'socid': 1, 'note': 'Inserted with Python', 'order_supplier': 1, 'date': '2021-07-28'}",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierinvoices/{id}/validate": {
            "post": {
                "operationId": "supplierinvoicesValidate",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Invoice ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierinvoicesValidateModel",
                        "description": "idwarehouse  \nnotrigger  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/supplierinvoicesValidateModel"
                        }
                    }
                ],
                "summary": "Validate an invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "500": {
                        "description": "System error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierinvoices/{id}/payments": {
            "get": {
                "operationId": "supplierinvoicesRetrievePayments",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of SupplierInvoice",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get list of payments of a given supplier invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "supplierinvoicesAddPayment",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierinvoicesAddPaymentModel",
                        "description": "**datepaye** (required)  \n**payment_mode_id** (required)  \n**closepaidinvoices** (required)  \n**accountid** (required)  \nnum_payment  \ncomment  \nchqemetteur  \nchqbank  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/supplierinvoicesAddPaymentModel"
                        }
                    }
                ],
                "summary": "Add payment line to a specific supplier invoice with the remain to pay as amount. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierinvoices/{id}/lines": {
            "get": {
                "operationId": "supplierinvoicesRetrieveLines",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of supplier invoice",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get lines of a supplier invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "supplierinvoicesCreateLine",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of supplier invoice to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierinvoicesCreateLineModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/supplierinvoicesCreateLineModel"
                        }
                    }
                ],
                "summary": "Add a line to given supplier invoice ??",
                "description": "Note: socid = dolibarr_order_id, pu_ht = net price, remise = discount Example: {'socid': 1, 'qty': 1, 'pu_ht': 21.0, 'tva_tx': 25.0, 'fk_product': '1189', 'product_type': 0, 'remise_percent': 1.0, 'vat_src_code': None}",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierinvoices/{id}/lines/{lineid}": {
            "put": {
                "operationId": "supplierinvoicesUpdateLine",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of supplier invoice to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lineid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of line to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierinvoicesUpdateLineModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/supplierinvoicesUpdateLineModel"
                        }
                    }
                ],
                "summary": "Update a line to a given supplier invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Not allowed"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "304": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "supplierinvoicesRemoveLine",
                "tags": [
                    "supplierinvoices"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of supplier invoice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "lineid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of the line to delete",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Deletes a line of a given supplier invoice ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad parameters"
                    },
                    "401": {
                        "description": "Not allowed"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "405": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierorders/{id}": {
            "get": {
                "operationId": "retrieveSupplierorders",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of supplier order",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a supplier order object ??",
                "description": "Return an array with supplier order information",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateSupplierorders",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of supplier order to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateSupplierordersModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateSupplierordersModel"
                        }
                    }
                ],
                "summary": "Update supplier order ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeSupplierorders",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Supplier order ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete supplier order ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierorders": {
            "get": {
                "operationId": "listSupplierorders",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "thirdparty_ids",
                        "type": "string",
                        "description": "Thirdparty ids to filter orders of (example '1' or '1,2,3')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "product_ids",
                        "type": "string",
                        "description": "Product ids to filter orders of (example '1' or '1,2,3')",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "description": "Filter by order status : draft | validated | approved | running | received_start | received_end | cancelled | refused",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.datec:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List orders ??",
                "description": "Get a list of supplier orders",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createSupplierorders",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "createSupplierordersModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createSupplierordersModel"
                        }
                    }
                ],
                "summary": "Create supplier order object ??",
                "description": "Example: {\"ref\": \"auto\", \"ref_supplier\": \"1234\", \"socid\": \"1\", \"multicurrency_code\": \"SEK\", \"multicurrency_tx\": 1, \"tva_tx\": 25, \"note\": \"Imported via the REST API\"}",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierorders/{id}/validate": {
            "post": {
                "operationId": "supplierordersValidate",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierordersValidateModel",
                        "description": "idwarehouse  \nnotrigger  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/supplierordersValidateModel"
                        }
                    }
                ],
                "summary": "Validate an order ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierorders/{id}/approve": {
            "post": {
                "operationId": "supplierordersApprove",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierordersApproveModel",
                        "description": "idwarehouse  \nsecondlevel  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/supplierordersApproveModel"
                        }
                    }
                ],
                "summary": "Approve an order ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierorders/{id}/makeorder": {
            "post": {
                "operationId": "supplierordersMakeOrder",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierordersMakeOrderModel",
                        "description": "**date** (required)  \n**method** (required)  \ncomment  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/supplierordersMakeOrderModel"
                        }
                    }
                ],
                "summary": "Sends an order to the vendor ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/supplierorders/{id}/receive": {
            "post": {
                "operationId": "supplierordersReceiveOrder",
                "tags": [
                    "supplierorders"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Order ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "supplierordersReceiveOrderModel",
                        "description": "**closeopenorder** (required)  \n**comment** (required)  \n**lines** (required)  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/supplierordersReceiveOrderModel"
                        }
                    }
                ],
                "summary": "Receives the order, dispatches products. ??",
                "description": " Example: <code> { \"closeopenorder\": 1, \"comment\": \"\", \"lines\": [{ \"id\": 14, \"fk_product\": 112, \"qty\": 18, \"warehouse\": 1, \"price\": 114, \"comment\": \"\", \"eatby\": 0, \"sellby\": 0, \"batch\": 0, \"notrigger\": 0 }] }</code>",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}": {
            "get": {
                "operationId": "retrieveThirdparties",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of third party to load",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a thirdparty object ??",
                "description": "Return an array with thirdparty informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "operationId": "updateThirdparties",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "updateThirdpartiesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/updateThirdpartiesModel"
                        }
                    }
                ],
                "summary": "Update thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "removeThirdparties",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Thirparty ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/email/{email}": {
            "get": {
                "operationId": "thirdpartiesRetrieveByEmail",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "type": "string",
                        "description": "Email of third party to load",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a thirdparty object by email. ??",
                "description": " Return an array with thirdparty informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/barcode/{barcode}": {
            "get": {
                "operationId": "thirdpartiesRetrieveByBarcode",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "barcode",
                        "type": "string",
                        "description": "Barcode of third party to load",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get properties of a thirdparty object by barcode. ??",
                "description": " Return an array with thirdparty informations",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "RestException"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties": {
            "get": {
                "operationId": "listThirdparties",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "t.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "defaultValue": 100,
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "mode",
                        "type": "integer",
                        "format": "int64",
                        "description": "Set to 1 to show only customers Set to 2 to show only prospects Set to 3 to show only those are not customer neither prospect Set to 4 to show only suppliers",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "category",
                        "type": "integer",
                        "format": "int64",
                        "description": "Use this param to filter list by category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sqlfilters",
                        "type": "string",
                        "description": "Other criteria to filter answers separated by a comma. Syntax example \"((t.nom:like:'TheCompany%') or (t.name_alias:like:'TheCompany%')) and (t.datec:<:'20160101')\"",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "List thirdparties ??",
                "description": "Get a list of thirdparties",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "createThirdparties",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "createThirdpartiesModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/createThirdpartiesModel"
                        }
                    }
                ],
                "summary": "Create thirdparty object ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/merge/{idtodelete}": {
            "put": {
                "operationId": "thirdpartiesMerge",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty to keep (the target thirdparty)",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "idtodelete",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty to remove (the thirdparty to delete), once data has been merged into the target thirdparty.",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Merge a thirdparty into another one. ??",
                "description": " Merge content (properties, notes) and objects (like invoices, events, orders, proposals, ...) of a thirdparty into a target thirdparty, then delete the merged thirdparty. If a property has a defined value both in thirdparty to delete and thirdparty to keep, the value into the thirdparty to delete will be ignored, the value of target thirdparty will remain, except for notes (content is concatenated).",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/setpricelevel": {
            "put": {
                "operationId": "thirdpartiesSetThirdpartyPriceLevel",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "thirdpartiesSetThirdpartyPriceLevelModel",
                        "description": "**priceLevel** (required)  \n",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/thirdpartiesSetThirdpartyPriceLevelModel"
                        }
                    }
                ],
                "summary": "Set new price level for the given thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Price level out of bounds"
                    },
                    "401": {
                        "description": "Access not allowed for your login"
                    },
                    "404": {
                        "description": "Thirdparty not found"
                    },
                    "500": {
                        "description": "Error fetching/setting price level"
                    },
                    "501": {
                        "description": "Request needs modules \"Thirdparties\" and \"Products\" and setting Multiprices activated"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/categories": {
            "get": {
                "operationId": "thirdpartiesRetrieveCategories",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "s.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get customer categories for a thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/categories/{category_id}": {
            "post": {
                "operationId": "thirdpartiesAddCategory",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of category",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Add a customer category to a thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "thirdpartiesRemoveCategory",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of category",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Remove the link between a customer category and the thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/supplier_categories": {
            "get": {
                "operationId": "thirdpartiesRetrieveSupplierCategories",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "s.rowid",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "type": "integer",
                        "format": "int64",
                        "description": "Limit for list",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get supplier categories for a thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/supplier_categories/{category_id}": {
            "post": {
                "operationId": "thirdpartiesAddSupplierCategory",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of category",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Add a supplier category to a thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "thirdpartiesRemoveSupplierCategory",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of category",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Remove the link between a category and the thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/outstandingproposals": {
            "get": {
                "operationId": "thirdpartiesRetrieveOutStandingProposals",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "mode",
                        "type": "string",
                        "defaultValue": "customer",
                        "description": "'customer' or 'supplier'",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get outstanding proposals of thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/outstandingorders": {
            "get": {
                "operationId": "thirdpartiesRetrieveOutStandingOrder",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "mode",
                        "type": "string",
                        "defaultValue": "customer",
                        "description": "'customer' or 'supplier'",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get outstanding orders of thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/outstandinginvoices": {
            "get": {
                "operationId": "thirdpartiesRetrieveOutStandingInvoices",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "mode",
                        "type": "string",
                        "defaultValue": "customer",
                        "description": "'customer' or 'supplier'",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get outstanding invoices of thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/representatives": {
            "get": {
                "operationId": "thirdpartiesRetrieveSalesRepresentatives",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "mode",
                        "type": "string",
                        "description": "0=Array with properties, 1=Array of id.",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get representatives of thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/fixedamountdiscounts": {
            "get": {
                "operationId": "thirdpartiesRetrieveFixedAmountDiscounts",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "defaultValue": "none",
                        "enum": [
                            "none",
                            "available",
                            "used"
                        ],
                        "description": "Filter exceptional discount. \"none\" will return every discount, \"available\" returns unapplied discounts, \"used\" returns applied discounts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortfield",
                        "type": "string",
                        "defaultValue": "f.type",
                        "description": "Sort field",
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sortorder",
                        "type": "string",
                        "defaultValue": "ASC",
                        "description": "Sort order",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get fixed amount discount of a thirdparty (all sources: deposit, credit note, commercial offers...) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/getinvoicesqualifiedforreplacement": {
            "get": {
                "operationId": "thirdpartiesRetrieveInvoicesQualifiedForReplacement",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Return list of invoices qualified to be replaced by another invoice. ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/getinvoicesqualifiedforcreditnote": {
            "get": {
                "operationId": "thirdpartiesRetrieveInvoicesQualifiedForCreditNote",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Return list of invoices qualified to be corrected by a credit note. ??",
                "description": "Invoices matching the following rules are returned (validated + payment on process) or classified (paid completely or paid partialy) + not already replaced + not already a credit note",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/bankaccounts": {
            "get": {
                "operationId": "thirdpartiesRetrieveCompanyBankAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Get CompanyBankAccount objects for thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "thirdpartiesCreateCompanyBankAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "thirdpartiesCreateCompanyBankAccountModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/thirdpartiesCreateCompanyBankAccountModel"
                        }
                    }
                ],
                "summary": "Create CompanyBankAccount object for thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/bankaccounts/{bankaccount_id}": {
            "put": {
                "operationId": "thirdpartiesUpdateCompanyBankAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "bankaccount_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of CompanyBankAccount",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "thirdpartiesUpdateCompanyBankAccountModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/thirdpartiesUpdateCompanyBankAccountModel"
                        }
                    }
                ],
                "summary": "Update CompanyBankAccount object for thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "thirdpartiesRemoveCompanyBankAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "bankaccount_id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of CompanyBankAccount",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete a bank account attached to a thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/generateBankAccountDocument/{companybankid}/{model}": {
            "get": {
                "operationId": "thirdpartiesGenerateBankAccountDocument",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Thirdparty id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "companybankid",
                        "type": "integer",
                        "format": "int64",
                        "description": "Companybank id",
                        "in": "path",
                        "required": false
                    },
                    {
                        "name": "model",
                        "type": "string",
                        "defaultValue": "sepamandate",
                        "description": "Model of document to generate",
                        "in": "path",
                        "required": false
                    }
                ],
                "summary": "Generate a Document from a bank account record (like SEPA mandate) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/gateways": {
            "get": {
                "operationId": "thirdpartiesRetrieveSocieteAccounts",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "site",
                        "type": "string",
                        "description": "Site key",
                        "in": "query",
                        "required": false
                    }
                ],
                "summary": "Get a specific gateway attached to a thirdparty (by specifying the site key) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User does not have permission to read thirdparties"
                    },
                    "404": {
                        "description": "Not Found: Specified thirdparty ID does not belongs to an existing thirdparty"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "operationId": "thirdpartiesCreateSocieteAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "thirdpartiesCreateSocieteAccountModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/thirdpartiesCreateSocieteAccountModel"
                        }
                    }
                ],
                "summary": "Create and attach a new gateway to an existing thirdparty ??",
                "description": "Possible fields for request_data (request body) are specified in <code>llx_societe_account</code> table.<br> See <a href=\"https://wiki.dolibarr.org/index.php/Table_llx_societe_account\">Table llx_societe_account</a> wiki page for more information<br><br> <u>Example body payload :</u> <pre>{\"key_account\": \"cus_DAVkLSs1LYyYI\", \"site\": \"stripe\"}</pre>",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User does not have permission to read thirdparties"
                    },
                    "409": {
                        "description": "Conflict: A SocieteAccount entity (gateway) already exists for this company and site."
                    },
                    "500": {
                        "description": "Internal Server Error: Error creating SocieteAccount account"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "thirdpartiesRemoveSocieteAccounts",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete all gateways attached to a thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User does not have permission to delete thirdparties gateways"
                    },
                    "404": {
                        "description": "Not Found: Specified thirdparty ID does not belongs to an existing thirdparty"
                    },
                    "500": {
                        "description": "Internal Server Error: Error deleting SocieteAccount entity"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/thirdparties/{id}/gateways/{site}": {
            "put": {
                "operationId": "thirdpartiesUpdateSocieteAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "site",
                        "type": "string",
                        "description": "Site key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "thirdpartiesUpdateSocieteAccountModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/thirdpartiesUpdateSocieteAccountModel"
                        }
                    }
                ],
                "summary": "Create and attach a new (or replace an existing) specific site gateway to a thirdparty ??",
                "description": "You <strong>MUST</strong> pass all values to keep (otherwise, they will be deleted) !<br> If you just need to update specific fields prefer <code>PATCH /thirdparties/{id}/gateways/{site}</code> endpoint.<br><br> When a <strong>SocieteAccount</strong> entity does not exist for the <code>id</code> and <code>site</code> supplied, a new one will be created. In that case <code>fk_soc</code> and <code>site</code> members form request body payload will be ignored and <code>id</code> and <code>site</code> query strings parameters will be used instead.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User does not have permission to read thirdparties"
                    },
                    "500": {
                        "description": "Internal Server Error: Error updating SocieteAccount entity"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "patch": {
                "operationId": "thirdpartiesModifySocieteAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "Id of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "site",
                        "type": "string",
                        "description": "Site key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "thirdpartiesModifySocieteAccountModel",
                        "description": "request_data  \n",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/thirdpartiesModifySocieteAccountModel"
                        }
                    }
                ],
                "summary": "Update specified values of a specific gateway attached to a thirdparty ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User does not have permission to read thirdparties"
                    },
                    "404": {
                        "description": "Not Found: Specified thirdparty ID does not belongs to an existing thirdparty"
                    },
                    "409": {
                        "description": "Conflict: Another SocieteAccount entity already exists for this thirdparty with this site key."
                    },
                    "500": {
                        "description": "Internal Server Error: Error updating SocieteAccount entity"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "operationId": "thirdpartiesRemoveSocieteAccount",
                "tags": [
                    "thirdparties"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of thirdparty",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "site",
                        "type": "integer",
                        "format": "int64",
                        "description": "Site key",
                        "in": "path",
                        "required": true
                    }
                ],
                "summary": "Delete a specific site gateway attached to a thirdparty (by gateway id) ??",
                "description": "",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User does not have permission to delete thirdparties gateways"
                    },
                    "404": {
                        "description": "Not Found: Specified thirdparty ID does not belongs to an existing thirdparty"
                    },
                    "500": {
                        "description": "Internal Server Error: Error deleting SocieteAccount entity"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        }
    },
    "definitions": {
        "createBankaccountsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "updateBankaccountsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "data"
                }
            }
        },
        "bankaccountsTransferModel": {
            "properties": {
                "bankaccount_from_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "BankAccount ID to use as the source of the internal wire transfer"
                },
                "bankaccount_to_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "BankAccount ID to use as the destination of the internal wire transfer"
                },
                "date": {
                    "type": "string",
                    "description": "Date of the internal wire transfer (UNIX timestamp)"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the internal wire transfer"
                },
                "amount": {
                    "type": "number",
                    "format": "double",
                    "description": "Amount to transfer from the source to the destination BankAccount"
                },
                "amount_to": {
                    "type": "number",
                    "format": "double",
                    "description": "Amount to transfer to the destination BankAccount (only when accounts does not share the same currency)"
                }
            },
            "required": [
                "bankaccount_from_id",
                "bankaccount_to_id",
                "date",
                "description",
                "amount"
            ]
        },
        "bankaccountsAddLineModel": {
            "properties": {
                "date": {
                    "type": "string",
                    "description": "Payment date (timestamp)"
                },
                "type": {
                    "type": "string",
                    "description": "Payment mode (TYP,VIR,PRE,LIQ,VAD,CB,CHQ...)"
                },
                "label": {
                    "type": "string",
                    "description": "Label"
                },
                "amount": {
                    "type": "number",
                    "format": "double",
                    "description": "Amount (may be 0)"
                },
                "category": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Category"
                },
                "cheque_number": {
                    "type": "string",
                    "description": "Cheque numero"
                },
                "cheque_writer": {
                    "type": "string",
                    "description": "Name of cheque writer"
                },
                "cheque_bank": {
                    "type": "string",
                    "description": "Bank of cheque writer"
                },
                "accountancycode": {
                    "type": "string",
                    "description": "Accountancy code"
                },
                "datev": {
                    "type": "string",
                    "description": "Payment date value (timestamp)"
                },
                "num_releve": {
                    "type": "string",
                    "description": "Bank statement numero"
                }
            },
            "required": [
                "date",
                "type",
                "label",
                "amount"
            ]
        },
        "bankaccountsAddLinkModel": {
            "properties": {
                "url_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "ID to set in the URL"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the link"
                },
                "label": {
                    "type": "string",
                    "description": "Label"
                },
                "type": {
                    "type": "string",
                    "description": "Type of link ('payment', 'company', 'member', ...)"
                }
            },
            "required": [
                "url_id",
                "url",
                "label",
                "type"
            ]
        },
        "updateContactsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createContactsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "contactsCreateUserModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "documentsBuilddocModel": {
            "properties": {
                "modulepart": {
                    "type": "string",
                    "description": "Name of module or area concerned by file download ('thirdparty', 'member', 'proposal', 'supplier_proposal', 'order', 'supplier_order', 'invoice', 'supplier_invoice', 'shipment', 'project', ...)"
                },
                "original_file": {
                    "type": "string",
                    "description": "Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf)."
                },
                "doctemplate": {
                    "type": "string",
                    "description": "Set here the doc template to use for document generation (If not set, use the default template)."
                },
                "langcode": {
                    "type": "string",
                    "description": "Language code like 'en_US', 'fr_FR', 'es_ES', ... (If not set, use the default language)."
                }
            },
            "required": [
                "modulepart"
            ]
        },
        "createDocumentsModel": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "Name of file to create ('FA1705-0123.txt')"
                },
                "modulepart": {
                    "type": "string",
                    "description": "Name of module or area concerned by file upload ('product', 'service', 'invoice', 'proposal', 'project', 'project_task', 'supplier_invoice', 'expensereport', 'member', ...)"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference of object (This will define subdir automatically and store submited file into it)"
                },
                "subdir": {
                    "type": "string",
                    "description": "Subdirectory (Only if ref not provided)"
                },
                "filecontent": {
                    "type": "string",
                    "description": "File content (string with file content. An empty file will be created if this parameter is not provided)"
                },
                "fileencoding": {
                    "type": "string",
                    "description": "File encoding (''=no encoding, 'base64'=Base 64)"
                },
                "overwriteifexists": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Overwrite file if exists (1 by default)"
                },
                "createdirifnotexists": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Create subdirectories if the doesn't exists (1 by default)",
                    "defaultValue": 1
                }
            },
            "required": [
                "filename",
                "modulepart"
            ]
        },
        "updateDonationsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createDonationsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "donationsValidateModel": {
            "properties": {
                "idwarehouse": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Warehouse ID"
                },
                "notrigger": {
                    "type": "integer",
                    "format": "int64",
                    "description": "1=Does not execute triggers, 0= execute triggers"
                }
            }
        },
        "updateInvoicesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createInvoicesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "invoicesCreateLineModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "InvoiceLine data"
                }
            }
        },
        "invoicesUpdateLineModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "InvoiceLine data"
                }
            }
        },
        "invoicesAddContactModel": {
            "properties": {
                "fk_socpeople": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Id of thirdparty contact (if source = 'external') or id of user (if souce = 'internal') to link"
                },
                "type_contact": {
                    "type": "string",
                    "description": "Type of contact (code). Must a code found into table llx_c_type_contact. For example: BILLING"
                },
                "source": {
                    "type": "string",
                    "description": "external=Contact extern (llx_socpeople), internal=Contact intern (llx_user)"
                },
                "notrigger": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Disable all triggers"
                }
            },
            "required": [
                "fk_socpeople",
                "type_contact",
                "source"
            ]
        },
        "invoicesSettodraftModel": {
            "properties": {
                "idwarehouse": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Warehouse ID",
                    "defaultValue": -1
                }
            }
        },
        "invoicesValidateModel": {
            "properties": {
                "idwarehouse": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Warehouse ID"
                },
                "notrigger": {
                    "type": "integer",
                    "format": "int64",
                    "description": "1=Does not execute triggers, 0= execute triggers"
                }
            }
        },
        "invoicesSettopaidModel": {
            "properties": {
                "close_code": {
                    "type": "string",
                    "description": "Code filled if we classify to 'Paid completely' when payment is not complete (for escompte for example)"
                },
                "close_note": {
                    "type": "string",
                    "description": "Comment defined if we classify to 'Paid' when payment is not complete (for escompte for example)"
                }
            }
        },
        "invoicesAddPaymentModel": {
            "properties": {
                "datepaye": {
                    "type": "string",
                    "description": "Payment date"
                },
                "paymentid": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Payment mode Id",
                    "minimum": 1
                },
                "closepaidinvoices": {
                    "type": "string",
                    "description": "Close paid invoices",
                    "enum": [
                        "yes",
                        "no"
                    ]
                },
                "accountid": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Account Id",
                    "minimum": 1
                },
                "num_payment": {
                    "type": "string",
                    "description": "Payment number (optional)"
                },
                "comment": {
                    "type": "string",
                    "description": "Note private (optional)"
                },
                "chqemetteur": {
                    "type": "string",
                    "description": "Payment issuer (mandatory if paymentcode = 'CHQ')"
                },
                "chqbank": {
                    "type": "string",
                    "description": "Issuer bank name (optional)"
                }
            },
            "required": [
                "datepaye",
                "paymentid",
                "closepaidinvoices",
                "accountid"
            ]
        },
        "invoicesAddPaymentDistributedModel": {
            "properties": {
                "arrayofamounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array with id of invoices with amount to pay for each invoice"
                },
                "datepaye": {
                    "type": "string",
                    "description": "Payment date"
                },
                "paymentid": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Payment mode Id",
                    "minimum": 1
                },
                "closepaidinvoices": {
                    "type": "string",
                    "description": "Close paid invoices",
                    "enum": [
                        "yes",
                        "no"
                    ]
                },
                "accountid": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Account Id",
                    "minimum": 1
                },
                "num_payment": {
                    "type": "string",
                    "description": "Payment number (optional)"
                },
                "comment": {
                    "type": "string",
                    "description": "Note private (optional)"
                },
                "chqemetteur": {
                    "type": "string",
                    "description": "Payment issuer (mandatory if paiementcode = 'CHQ')"
                },
                "chqbank": {
                    "type": "string",
                    "description": "Issuer bank name (optional)"
                },
                "ref_ext": {
                    "type": "string",
                    "description": "External reference (optional)"
                },
                "accepthigherpayment": {
                    "type": "boolean",
                    "description": "Accept higher payments that it remains to be paid (optional)"
                }
            },
            "required": [
                "arrayofamounts",
                "datepaye",
                "paymentid",
                "closepaidinvoices",
                "accountid"
            ]
        },
        "invoicesUpdatePaymentModel": {
            "properties": {
                "num_payment": {
                    "type": "string",
                    "description": "Payment number"
                }
            }
        },
        "listLoginModel": {
            "properties": {
                "login": {
                    "type": "string",
                    "description": "User login"
                },
                "password": {
                    "type": "string",
                    "description": "User password"
                },
                "entity": {
                    "type": "string",
                    "description": "Entity (when multicompany module is used). '' means 1=first company."
                },
                "reset": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)"
                }
            },
            "required": [
                "login",
                "password"
            ]
        },
        "updateProposalsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createProposalsModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "proposalsCreateLineModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Commercial proposal line data"
                }
            }
        },
        "proposalsUpdateLineModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Commercial proposal line data"
                }
            }
        },
        "proposalsValidateModel": {
            "properties": {
                "notrigger": {
                    "type": "integer",
                    "format": "int64",
                    "description": "1=Does not execute triggers, 0= execute triggers"
                }
            }
        },
        "proposalsCloseModel": {
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Must be 2 (accepted) or 3 (refused)",
                    "minimum": 2,
                    "maximum": 3
                },
                "note_private": {
                    "type": "string",
                    "description": "Add this mention at end of private note"
                },
                "notrigger": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Disabled triggers"
                }
            },
            "required": [
                "status"
            ]
        },
        "updateSupplierinvoicesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createSupplierinvoicesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "supplierinvoicesValidateModel": {
            "properties": {
                "idwarehouse": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Warehouse ID"
                },
                "notrigger": {
                    "type": "integer",
                    "format": "int64",
                    "description": "1=Does not execute triggers, 0= execute triggers"
                }
            }
        },
        "supplierinvoicesAddPaymentModel": {
            "properties": {
                "datepaye": {
                    "type": "string",
                    "description": "Payment date"
                },
                "payment_mode_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Payment mode ID (look it up via REST GET to /setup/dictionary/payment_types)",
                    "minimum": 1
                },
                "closepaidinvoices": {
                    "type": "string",
                    "description": "Close paid invoices",
                    "enum": [
                        "yes",
                        "no"
                    ]
                },
                "accountid": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Bank account ID (look it up via REST GET to /bankaccounts)",
                    "minimum": 1
                },
                "num_payment": {
                    "type": "string",
                    "description": "Payment number (optional)"
                },
                "comment": {
                    "type": "string",
                    "description": "Note (optional)"
                },
                "chqemetteur": {
                    "type": "string",
                    "description": "Payment issuer (mandatory if payment_mode_id corresponds to 'CHQ'-payment type)"
                },
                "chqbank": {
                    "type": "string",
                    "description": "Issuer bank name (optional)"
                }
            },
            "required": [
                "datepaye",
                "payment_mode_id",
                "closepaidinvoices",
                "accountid"
            ]
        },
        "supplierinvoicesCreateLineModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supplier invoice line data"
                }
            }
        },
        "supplierinvoicesUpdateLineModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "InvoiceLine data"
                }
            }
        },
        "updateSupplierordersModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createSupplierordersModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "supplierordersValidateModel": {
            "properties": {
                "idwarehouse": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Warehouse ID"
                },
                "notrigger": {
                    "type": "integer",
                    "format": "int64",
                    "description": "1=Does not execute triggers, 0= execute triggers"
                }
            }
        },
        "supplierordersApproveModel": {
            "properties": {
                "idwarehouse": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Warehouse ID"
                },
                "secondlevel": {
                    "type": "integer",
                    "format": "int64",
                    "description": "1=Does not execute triggers, 0= execute triggers"
                }
            }
        },
        "supplierordersMakeOrderModel": {
            "properties": {
                "date": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Date (unix timestamp in sec)"
                },
                "method": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Method"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment"
                }
            },
            "required": [
                "date",
                "method"
            ]
        },
        "supplierordersReceiveOrderModel": {
            "properties": {
                "closeopenorder": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Close order if everything is received"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of product dispatches"
                }
            },
            "required": [
                "lines"
            ]
        },
        "updateThirdpartiesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Datas"
                }
            }
        },
        "createThirdpartiesModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request datas"
                }
            }
        },
        "thirdpartiesSetThirdpartyPriceLevelModel": {
            "properties": {
                "priceLevel": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Price level to apply to thirdparty"
                }
            },
            "required": [
                "priceLevel"
            ]
        },
        "thirdpartiesCreateCompanyBankAccountModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "thirdpartiesUpdateCompanyBankAccountModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "thirdpartiesCreateSocieteAccountModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "thirdpartiesUpdateSocieteAccountModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        },
        "thirdpartiesModifySocieteAccountModel": {
            "properties": {
                "request_data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request data"
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "query"
        }
    },
    "info": {
        "version": "1",
        "title": "Restler API Explorer",
        "description": "Live API Documentation",
        "contact": {
            "name": "Restler Support",
            "url": "luracast.com/products/restler",
            "email": "arul@luracast.com"
        },
        "license": {
            "name": "LGPL-2.1",
            "url": "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"
        }
    }
}