"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

scalar UUID

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type Query {
  """
  Fetch all lists.
  """
  getAllLists(
    """Filtering options for lists."""
    filter: ListFilterInput

    """Sort lists."""
    sortBy: ListSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ListCountableConnection

  """
  Look up list by ID
  """
  getListById(
    """ID of the list."""
    id: ID!
  ): List

  """
  Gets all campaigns.
  """
  getAllCampaigns(
    """Filtering options for campaigns."""
    filter: CampaignFilterInput

    """Campaign lists."""
    sortBy: CampaignSortingInput

    """Return the elements in the campaign that come before the specified cursor."""
    before: String

    """Return the elements in the campgian that come after the specified cursor."""
    after: String

    """Return the first n elements from the campaign."""
    first: Int

    """Return the last n elements from the campaign."""
    last: Int
  ): CampaignCountableConnection

  """
  Gets a single campaign.
  """
  getCampaignById(
    """ID of the campaign."""
    id: ID!
  ): Campaign

  """
  Gets the HTML preview of a campaign body.
  """
  getCampaignHTMLPreview(
    """ID of the campaign."""
    id: ID!
  ): CampaignPreview

  """
  Fetch all settings.
  """
  getSettings(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SettingsCountableConnection
}


type Mutation {
  """
  Create new list.
  """
  listCreate(
    """Input fields to create a list."""
    input: ListCreateInput!
  ): ListCreate

  """
  Update a list
  """
  listUpdate(
    """The id of the list to be modified."""
    id: ID!

    """Input fields to create list."""
    input: ListUpdateInput!
  ): ListUpdate

  """
  Delete list.
  """
  listDelete(
    """The id of the list to be deleted."""
    id: ID!
  ): ListDelete

  """
  Creates a new campaign.
  """
  campaignCreate(
    """Input fields to create a campaign."""
    input: CampaignCreateInput!
  ): CampaignCreate

  """
  Modifies a campaign status to start, pause, cancel, or schedule a campaign.
  """
  campaignModifyStatus(
    """The id value of the campaign whose status is to be modified."""
    id: ID!

    """`scheduled`, `running`, `paused`, `cancelled`."""
    status: String!
  ): CampaignModifyStatus

  """
  Deletes a campaign, only scheduled campaigns that have not yet been started can be deleted.
  """
  campaignDelete(
    """The id value of the campaign you want to delete."""
    id: ID!
  ): CampaignDelete

  """
  Creates a new setting.
  """
  settingCreate(
    """Input fields to create a setting."""
    input: SettingCreateInput!
  ): SettingCreate

   """
  Update a setting
  """
  settingUpdate(
    """The id of the list to be modified."""
    key: String!

    """Input fields to update."""
    value: String!
  ): SettingUpdate

 """
  Deletes a setting.
  """
  settingDelete(
    """The key value of the setting to delete"""
    key: String!
  ): SettingDelete
}



input ListFilterInput {
  search: String
  ids: [ID!]
}

input CampaignFilterInput {
  search: String
  ids: [ID!]
}


input ListSortingInput {
  """Specifies the direction in which to sort lists."""
  direction: OrderDirection!

  """Sort list by the selected field."""
  field: ListSortField!
}

input CampaignSortingInput {
  """Specifies the direction in which to sort campaigns."""
  direction: OrderDirection!

  """Sort campaigns by the selected field."""
  field: CampaignSortField!
}


enum OrderDirection {
  """Specifies an ascending sort order."""
  ASC

  """Specifies a descending sort order."""
  DESC
}

enum ListSortField {
  """Sort lists by name."""
  NAME
}

enum CampaignSortField {
  """Sort campaigns by name."""
  NAME
}


type ListCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ListCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CampaignCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CampaignCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type SettingsCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SettingsCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}



type ListCountableEdge {
  """The item at the end of the edge."""
  node: List!

  """A cursor for use in pagination."""
  cursor: String!
}

type CampaignCountableEdge {
  """The item at the end of the edge."""
  node: Campaign!

  """A cursor for use in pagination."""
  cursor: String!
}

type SettingsCountableEdge {
  """The item at the end of the edge."""
  node: Setting!

  """A cursor for use in pagination."""
  cursor: String!
}


"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}


"""Represents list data."""
type List implements Node {
  id: ID!
  uuid: UUID!
  """The name of the list"""
  name: String!
  type: String!
  optin: String!
  tags: [String]
  created_at: DateTime!
  updated_at: DateTime!
  subscriber_count: Int
}

"""Represents campaign data."""
type Campaign implements Node {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  campaignID: Int
  views: Int
  clicks: Int
  lists: ListData
  started_at: DateTime
  to_send: Int
  sent: Int!
  uuid: UUID!
  type: String
  name: String!
  subject: String!
  from_email: String!
  body: String!
  send_at: DateTime
  status: String!
  content_type: String!
  tags: [String]
  template_id: Int
  messenger: String!
}

"""Represents campaign data."""
type ListData implements Node {
  id: ID!
  name: String!
}

"""Represents a setting"""
type Setting {
  key: String!
  value: String!
  updated_at: DateTime
}

"""
Create new list
"""
type ListCreate {
  errors: [ListError!]!
  list: List
}

"""
Create new campaign
"""
type CampaignCreate {
  errors: [CampaignError!]!
  campaign: Campaign
}

"""
Modify a campaign status
"""
type CampaignModifyStatus {
  errors: [CampaignError!]!
  campaign: Campaign
}


type CampaignPreview {
  errors: [CampaignError!]!
  preview: String
}

"""Delete a campaign"""
type CampaignDelete {
  errors: [CampaignError!]!
  data: Boolean
}

"""Creates a setting"""
type SettingCreate {
  errors: [SettingError!]!
  data: Boolean
}
"""Updates a setting"""
type SettingUpdate {
  errors: [SettingError!]!
  data: Boolean
}
"""Deletes a setting"""
type SettingDelete {
  errors: [SettingError!]!
  data: Boolean
}


type ListError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ListErrorCode!
}

"""An enumeration."""
enum ListErrorCode {
  REQUIRED
  UNIQUE
}

type CampaignError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: CampaignErrorCode!
}

"""An enumeration."""
enum CampaignErrorCode {
  REQUIRED
  UNIQUE
}

type SettingError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: SettingErrorCode!
}

"""An enumeration."""
enum SettingErrorCode {
  REQUIRED
  UNIQUE
}


input ListCreateInput {
  """The new list name."""
  name: String!

  """List type, can be set to Private or Public."""
  type: String!

  """`single` or `double` optin."""
  optin: String!
}

input CampaignCreateInput {
  """Name of the campaign."""
  name: String!

  """(E-mail) subject of the campaign."""
  subject: String!

  """Array of list IDs to send the campaign to."""
  lists: [ID]!

  """From e-mail to show on the campaign e-mails. If left empty, the default value from settings is used."""
  from_email: String

  """`regular` or `optin` campaign."""
  type: String!

  """`richtext`, `html`, `markdown`, `plain`"""
  content_type: String!

  """Campaign content body."""
  body: String!

  """Alternate plain text body for HTML (and richtext) e-mails."""
  altbody: String

  """A timestamp to schedule the campaign at. Eg: `2021-12-25T06:00:00` (YYYY-MM-DDTHH:MM:SS)"""
  send_at: String

  """`email` or a custom messenger defined in the settings. If left empty, `email` is used."""
  messenger: String

  """ID of the template to use. If left empty, the default template is used."""
  template_id: String

  """Array of string tags to mark the campaign."""
  tags: [String]
}


input ListUpdateInput {
  """The name which the old name will be modified to."""
  name: String

  """List type, can be set to Private or Public."""
  type: String

  """`single` or `double` optin."""
  optin: String
}

input SettingCreateInput {
  """The name of the setting"""
  key: String!

  """The value of the setting"""
  value: String!
}


"""
Modifies a list.
"""
type ListUpdate {
  errors: [ListError!]!
  list: List
}

"""
Deletes a list.
"""
type ListDelete {
  errors: [ListError!]!
  list: List
}